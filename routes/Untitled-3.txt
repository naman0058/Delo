var express = require('express')
var pool = require('./pool')
var router = express.Router()
var upload = require('./multer');
const SendOtp = require('sendotp');
const sendOtp = new SendOtp('300563AFuzfOZn9ESb5db12f8f');
var msg91=require('msg91-sms');
var authkey='300563AFuzfOZn9ESb5db12f8f';
var senderid='DELOTM';
var route='4';
var dialcode='91';
var payumoney = require('payumoney-node');
payumoney.setKeys(`${process.env.PAYUMONEYKEY1}`, `${process.env.PAYUMONEYKEY2}`,`${process.env.PAYUMONEYKEY3}`); 
payumoney.isProdMode(true);
var request = require('request');
const fetch = require('node-fetch');
const { Expo } = require('expo-server-sdk')

const Razorpay = require("razorpay");
var instance = new Razorpay({
    key_id: 'rzp_live_2KlcXieUGyQ8k6',
    key_secret: '9CukFlVqEBgQ1l7LB03DXBPk',
  });

var dt = new Date();
var todaytime = (dt.getHours() + ":" + dt.getMinutes()).toString();


console.log("present time",todaytime)
console.log("aa gya",process.env.encryptedkey)


/////////////////////////Team API Starts/////////////////////////////
 
var today = new Date();
var newdate = new Date();
    newdate.setDate(today.getDate()+30);

    var dt = new Date();
    var todaytime = dt.getHours() + ":" + dt.getMinutes();


var dd = today.getDate();

var futuretime = today.getHours()+2 + ":" + today.getMinutes();


var mm = today.getMonth()+1; 
var yyyy = today.getFullYear();
var a = newdate.getDate()
var b = newdate.getMonth()+1;
if(dd<10) 
{
    dd='0'+dd;
  
} 

if(a<10){
  a='0'+a;
}


if(mm<10) 
{
    mm='0'+mm;
} 


if(b<10) 
{
    b='0'+b;
} 
today = yyyy+'-'+mm+'-'+dd;

 var my = newdate.toLocaleDateString()
 var my1 = newdate.getFullYear()+'-'+b+'-'+a
//console.log(today)
//console.log(newdate)
//console.log(my1)


router.post('/userlogin',(req,res)=>{
  console.log("asss",req.body)
  console.log("aa gya",process.env.encryptedkey)
console.log('ghhhhhh')
  if(process.env.encryptedkey == req.body.key){
   
  var otp =   Math.floor(100000 + Math.random() * 9000);
  sendOtp.send(req.body.number, "DELOTM", otp,(err,result)=>{
  if(err) res.json({error : 'error'})
  else {
  
pool.query(`insert into otp_msg (number,date,time) values('${req.body.number}','${today}','${todaytime}')`,(err,result)=>{
  if(err) throw err;
  else {
    res.json({success : 'successfully send otp'})
  }
}) 
  }
}) 
  
}
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})


router.post('/getotp',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  console.log("Sending Number",req.body.number)
  var otp =   Math.floor(100000 + Math.random() * 9000);
  pool.query(`select * from team1 where number = "${req.body.number}"`,(err,result)=>{
  if(err) throw err;
  else if(result[0]){
    res.send({
      type : 'success',
      msg : 'number already registered'
    })
    console.log('response send')
  }
  else{
    sendOtp.send(req.body.number, "DELOTM", otp,(err,result)=>{
      if(err) res.json({error : 'error'})
      else {
       
    pool.query(`insert into otp_msg (number,date,time) values('${req.body.number}','${today}','${todaytime}')`,(err,result)=>{
      if(err) throw err;
      else {
        res.json({success : 'successfully send otp'})
      }
    }) 
    
    }
    
    });
  }
  
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}

})



router.post('/teamlogin',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  var otp =   Math.floor(100000 + Math.random() * 9000);
  pool.query(`select * from team where number = "${req.body.number}"`,(err,result)=>{
   if(err) throw err;
   else if(result[0]) {
    sendOtp.send(req.body.number, "DELOTM", otp,(err,result)=>{
      if(err) res.json({error : 'error'})
      else {
      
    pool.query(`insert into otp_msg (number,date,time) values('${req.body.number}','${today}','${todaytime}')`,(err,result)=>{
      if(err) throw err;
      else {
        res.json({
          type : 'success'
        })
      }
    }) 
    
    }
    })
    }
   else{
    pool.query(`select * from team1 where number = "${req.body.number}"`,(err,result)=>{
      if(err) throw err;
     
      else if(result[0]){
        sendOtp.send(req.body.number, "DELOTM", otp,(err,result)=>{
          if(err) res.json({error : 'error'})
          else {
         
        pool.query(`insert into otp_msg (number,date,time) values('${req.body.number}','${today}','${todaytime}')`,(err,result)=>{
          if(err) throw err;
          else {
            res.json({
              type : 'success'
            })
          }
        }) 
        
        }
        })

      }
      else{
        res.json({ msg : 'number not exist' });
      }
    
    
    })
   } 
})
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}

})




router.post('/otpverification',(req,res)=>sendOtp.verify(req.body.number, req.body.otp, (err,result)=> err ? console.log(err) : res.json(result)));  



router.post('/verificationcomplete',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
    pool.query(`select * from users where number = "${req.body.number}"`,(err,result)=>{
      if(err) throw err;
      else if(result[0]){
       res.json({
         msg : 'exists user'
       })
        
     
      }
      else{
        pool.query(`insert into users(number,offer,date,valid_date,promocode,latitude,longitude,time) values(${req.body.number},'1800','${req.body.date}','${req.body.valid_date}','DELO100','${req.body.latitude}','${req.body.longitude}','${todaytime}') `,(err,result)=>{
          if(err) throw err;
          else { 

            msg91.sendOne(authkey,req.body.number,`Rs. 1800 Free Cash has been added in your Delo Credits wallet as per offer and it will expire on ${req.body.valid_date}`,senderid,route,dialcode,function(response){


              if(err) throw err;
              else{
                
              pool.query(`insert into normal_message (number,date,time,message) values('${req.body.number}','${today}','${todaytime}','Rs. 1800 Free Cash has been added in your Delo Credits wallet as per offer and it will expire on ${req.body.valid_date}') ` , (err,result)=>{
                if(err) throw err;
               
              else{

                msg91.sendOne(authkey,req.body.number,`Dear Customer, Thank you for showing interest in Delo Services.`,senderid,route,dialcode,function(response){

              if(err) console.log(err)
              else{
              pool.query(`insert into normal_message (number,date,time,message) values('${req.body.number}','${today}','${todaytime}','Rs. 1800 Free Cash has been added in your Delo Credits wallet as per offer and it will expire on ${req.body.valid_date}') ` , (err,result)=>{
                if(err) throw err;
              else{
                res.send('success')
              }
       
                 
                });

              }
            })
          }
       
             
            });

             res.json({
               msg : 'new user'
             })
            
          }
        })
      }
      })
       
      }
      

    
    })
    
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})


  
 router.post('/resendotp',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
    var otp =   Math.floor(100000  + Math.random() * 9000);
    sendOtp.send(req.body.loginverify, "DELOTM", otp,(err,result)=> {
      if(err) res.json({error : 'error'})
      else {
    
    pool.query(`insert into otp_msg (number,date,time) values('${req.body.number}','${today}','${todaytime}')`,(err,result)=>{
      if(err) throw err;
      else {
        res.json(result)
      }
    }) 
    
    }
    });
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})

router.post('/teamlogin',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
     var otp =   Math.floor(100000 + Math.random() * 9000);
     pool.query(`select * from team where number = "${req.body.number}"`,(err,result)=>{
      if(err) throw err;
      else if(result[0]) {
       sendOtp.send(req.body.number, "DELOTM", otp,(err,result)=>{


        if(err) res.json({error : 'error'})
        else {
         
      pool.query(`insert into otp_msg (number,date,time) values('${req.body.number}','${today}','${todaytime}')`,(err,result)=>{
        if(err) throw err;
        else {
          res.json(result)
        }
      }) 
      
      }

       })
       }
      else res.json({ msg : 'number not exist',result });
 })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})

router.post('/loginverification',(req,res)=> sendOtp.verify(req.body.number, req.body.otp, (err,result)=> err ? console.log(err) : res.json(result)))
  




router.post('/teaminsertdemo',upload.single('image'),(req,res)=>{
  
  let body = req.body
  
  
    body['image'] = req.file.filename
    body['number'] = req.body.number
    console.log(body)
   
   res.json({msg:'d'})
  
  })
  


router.post('/teaminsert',upload.single('image'),(req,res)=>{
  
let body = req.body


  body['image'] = req.file.filename
  body['number'] = req.body.number
  console.log(body)
 
  pool.query(`select * from team1 where number = "${req.body.number}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0]) res.send({msg : 'already number registered '})
    else{
      pool.query(`insert into team1 set ?`, body, (err, result) => {
        if(err) console.log(err);
        else {
          res.json(result)
 
        }
    })
    }
  })

})


router.post('/teaminsert1',(req,res)=>{
  
  let body = req.body
      body['number'] = req.body.number
    console.log(body)
    pool.query(`select * from team1 where number = "${req.body.number}"`,(err,result)=>{
      if(err) throw err;
      else if(result[0]) res.send({msg : 'already number registered '})
      else{
        pool.query(`insert into team1 set ?`, body, (err, result) => {
          if(err) console.log(err);
          else {
           console.log("result")
           res.json(result)
          }
      })
      }
    })
  
  })


  
router.post('/processing',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
      var query = `select t.* ,(select c.name from category c where c.id = t.categoryid) as categoryname from team t where t.number = ${req.body.number} and approval is not null`
        pool.query(query,(err,result)=>{
            if(err) throw err;
            else if(result[0]) res.json({msg : 'account verified',result})
             else {
               pool.query(`select t.* ,(select c.name from category c where c.id = t.categoryid) as categoryname from team1 t where t.number = ${req.body.number}`,(err,result)=>{
                 if(err) throw err;
                else{
                   res.json({msg : 'request is under process',result})
                }
               })
             }
          })
        }
        else{
          res.json({
            type : 'error',
            description : '404 Not Found'
          })
        }
        })

 
/////////////////////////Team API Ends/////////////////////////////

////////////////////////////////For Users Starts////////////////////////


router.post('/allleads',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  if(req.body.categoryid == '9'){
    var query1 = `select b.*,(select c.name from category c where c.id = b.categoryid) as categoryname from booking b where  
     b.service_agent is null and b.pincode = "${req.body.pincode}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    ||  b.service_agent is null and b.pincode = "${req.body.pincode1}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    || b.service_agent is null and b.pincode = "${req.body.pincode2}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    || b.service_agent is null and b.pincode = "${req.body.pincode3}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    || b.service_agent is null and b.pincode = "${req.body.pincode4}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    || b.service_agent is null and b.pincode = "${req.body.pincode5}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    ||  b.service_agent is null and b.pincode = "${req.body.pincode6}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    || b.service_agent is null and b.pincode = "${req.body.pincode7}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 
    ||  b.service_agent is null and b.pincode = "${req.body.pincode8}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}" 


    || b.service_agent = "" and b.pincode = "${req.body.pincode}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode1}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode2}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode3}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode4}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode5}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode6}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode7}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode8}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"  
   
    
    
    order by id desc`
    pool.query(query1,(err,result)=>{
        if(err) throw err;
        else  res.json(result)
      
        
    })
  }
  else{

  var query1 = `select b.*,(select c.name from category c where c.id = b.categoryid) as categoryname from booking b where 
    b.service_agent is null and b.pincode = "${req.body.pincode}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode1}" and categoryid = "${req.body.categoryid}"  
   || b.service_agent is null and b.pincode = "${req.body.pincode2}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode3}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode4}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode5}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode6}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode7}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent is null and b.pincode = "${req.body.pincode8}" and categoryid = "${req.body.categoryid}" 

   
   
   || b.service_agent = "" and b.pincode = "${req.body.pincode}" and categoryid = "${req.body.categoryid}" 
   || b.service_agent = "" and b.pincode = "${req.body.pincode1}" and categoryid = "${req.body.categoryid}" 
    || b.service_agent = "" and b.pincode = "${req.body.pincode2}" and categoryid = "${req.body.categoryid}"
    || b.service_agent = "" and b.pincode = "${req.body.pincode3}" and categoryid = "${req.body.categoryid}"   
    || b.service_agent = "" and b.pincode = "${req.body.pincode4}" and categoryid = "${req.body.categoryid}"   
    || b.service_agent = "" and b.pincode = "${req.body.pincode5}" and categoryid = "${req.body.categoryid}"   
    || b.service_agent = "" and b.pincode = "${req.body.pincode6}" and categoryid = "${req.body.categoryid}"  
    || b.service_agent = "" and b.pincode = "${req.body.pincode7}" and categoryid = "${req.body.categoryid}" 
    || b.service_agent = "" and b.pincode = "${req.body.pincode8}" and categoryid = "${req.body.categoryid}"  
   
   


   
   order by id desc`
  pool.query(query1,(err,result)=>{
      if(err) throw err;
      else  res.json(result)
    
      
  })
}
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/ongoing',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.* ,(select c.name from category c where c.id = b.categoryid) as categoryname  from booking b where b.date = CURDATE() and b.service_agent = "${req.body.number}"  and b.status is null order by time desc`,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/single_ongoing',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.* ,(select c.name from category c where c.id = b.categoryid) as categoryname  from booking b where id = "${req.body.id}"`,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})



router.post('/upcoming',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.* ,(select c.name from category c where c.id = b.categoryid) as categoryname ,(select s.name from services s where s.id = b.booking_id) as servicesname from booking b where b.date = CURDATE() + INTERVAL 1 DAY and b.service_agent = "${req.body.number}"   order by time desc`,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})



router.post('/single_upcoming',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.* ,(select c.name from category c where c.id = b.categoryid) as categoryname ,(select s.name from services s where s.id = b.booking_id) as servicesname from booking b where id = "${req.body.id}"`,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/wallets',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
    var query = `select name,emailid,number,recharge_value from team where number = "${req.body.number}" `
    pool.query(query,(err,result)=>{
      if(err) throw err;
      else  res.json(result)
    })
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})

router.post('/leads_history',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.* ,(select c.name from category c where c.id = b.categoryid) as categoryname  from booking b where  b.service_agent = "${req.body.number}"  and status = 'completed'`,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})

router.post('/single_history',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.* ,(select c.name from category c where c.id = b.categoryid) as categoryname  from booking b where id="${req.body.id}"`,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/wallet_history',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select mode,createdOn,productinfo,amount,payment_source from recharge where phone = "${req.body.number}" `,(err,result)=>{
    if(err) throw err;
    else res.json(result)
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})

router.post('/rating',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select name,rating,review from booking where service_agent = "${req.body.number}" and rating is not null and review is not null and rating != 'get_rating' and review!= 'get_rating' and rating!='get_review' and review != 'get_review'`,(err,result)=>{
    if(err) throw err;
    else res.json(result)
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
 
})


/*

router.get('/index',(req,res)=>pool.query(`select * from category`,(err,result)=> err ? console.log(err) : 
var a = result
res.send(a)));*/

router.get('/index',(req,res)=>{
  
  pool.query(`select * from category`,(err,result)=>{
err ? console.log(err) : res.json(result)
    
  }) 

})


router.post('/subcategory',(req,res)=>pool.query(`select s.*,(select c.name from category c where c.id = '${req.body.categoryid}' ) as categoryname from subcategory s where s.categoryid = '${req.body.categoryid}'`,(err,result)=> err ? console.log(err) : res.json(result)))



router.post('/services',(req,res)=>pool.query(`select s.*,(select sub.name from subcategory sub where sub.id =  "${req.body.subcategoryid}" ) as subcategoryname from services s where  s.subcategoryid = "${req.body.subcategoryid}"`,(err,result)=> err ? console.log(err) : res.json(result)))
  


router.post('/total_income',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select sum(price) as total_income from booking where service_agent = '${req.body.number}' `,(err,result)=>{
    if(err) throw err;
    else res.json(result)
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
 
})




router.post('/cart',(req,res)=>{
 
  let body = req.body
  console.log(req.body)

  pool.query(`select categoryid from team where number = "${req.body.usernumber}" and categoryid = "${req.body.categoryid}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0]){
      res.json({msg : 'Beacuse you are a team member of this services, you can not book this service'})
    }
    else{

  pool.query(`select * from services where id = "${req.body.booking_id}" `,(err,result)=>{
    if(err) throw err;
    else {
      body['categoryid'] = result[0].categoryid
      body['subcategoryid'] = result[0].subcategoryid
      body['price'] = result[0].price
      body['oneprice'] =  result[0].price
         body['quantity'] = '1'
      body['price'] = req.body.price
      var qua = '1'
pool.query(`select * from cart where usernumber = "${req.body.usernumber}"`,(err,result)=>{
if(err) throw err;
else if(result[0]) {
  if(req.body.categoryid==result[0].categoryid){
    if(req.body.booking_id ==result[0].booking_id){
pool.query(`update cart set quantity = quantity+${qua} , price = price+${req.body.price} where booking_id = '${req.body.booking_id}' and usernumber = "${req.body.usernumber}"`,(err,result)=>{
if(err) throw err;
else{
  res.json({
    msg : 'updated sucessfully'
  })
}
})
    }
    else{
    pool.query(`insert into cart set ?`,body,(err,result)=>{
      if(err) throw err;
      else{
        res.json({
          msg : 'updated sucessfully'
        })
      }
    })
  }
  }
  else{
    res.json({
      msg : 'Can not book two different categories services simultaneously. Replace cart ?'
    })
  
  }
}
else{
  pool.query(`insert into cart set ?`,body,(err,result)=>{
    if(err) throw err;
    else {
      res.json({
        msg : 'updated sucessfully'
      })
    }
  })
}

})
}
}) 
}
})

 
})
      





router.post('/cart/replace',(req,res)=>{
 
  let body = req.body
  console.log(req.body)
  pool.query(`select * from services where id = "${req.body.booking_id}" `,(err,result)=>{
    if(err) throw err;
    else { 
      body['categoryid'] = result[0].categoryid
      body['subcategoryid'] = result[0].subcategoryid
      body['price'] = result[0].price
      body['oneprice'] =  result[0].price
         body['quantity'] = '1'
      body['price'] = req.body.price

  pool.query(`delete from cart where usernumber = "${req.body.usernumber}"`,(err,result)=>{
    if(err) throw err;
    else{
      pool.query(`insert into cart set ?`,body,(err,result)=>{
        if(err) throw err;
        else {
          res.json({
            msg : 'updated sucessfully'
          })
        }
      })
    }
    
  })
}
})

})





router.post('/cart/all',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
 pool.query(`select usernumber from cart where usernumber = "${req.body.usernumber}"`,(err,result)=>{
    if(err) throw err;
    else res.json(result)
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})




router.post('/mycart',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
 
    var query = `select c.*,(select s.name from services s where s.id = c.booking_id) as servicename
    from cart c where c.usernumber = "${req.body.usernumber}";`
    var query1 = `select count(id) as counter from cart where usernumber = "${req.body.usernumber}";`
    var query2 = `select sum(price) as total_ammount from cart  where usernumber = "${req.body.usernumber}"; `
       pool.query(query+query1+query2,(err,result)=>{
      if(err) throw err;
      else if(result[0][0]) { 
             req.body.mobilecounter = result[1][0].counter
             console.log("MobileCounter",req.body.mobilecounter)
        res.json(result); 
      }
      else res.json({
        msg : 'empty cart'
      })
    })
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})




router.post('/cartupdate',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select id,price,oneprice,quantity from cart where id = "${req.body.id}"`,(err,result)=>{
    if(err) throw err;
    else{
      console.log(result[0])
      pool.query(`update cart set price = price + oneprice , quantity = quantity+1  where id = "${req.body.id}"`,(err,result)=>{
        err ? console.log(err) : res.json({
          msg : 'updated successfully'
        })
      })
    }
   

  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})



router.post('/cartdelete',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select id,price,quantity from cart where id = "${req.body.id}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0].quantity > 1 ){
      console.log(result[0])
      pool.query(`update cart set price = price - (price/quantity) , quantity = quantity-1  where id = "${req.body.id}"`,(err,result)=>{
        err ? console.log(err) :  res.json({
          msg : 'deleted successfully'
        })
      })
    }
    else{
      pool.query(`delete from cart where id = "${req.body.id}"`,(err,result)=>{
        err ? console.log(err) : res.json({
          msg : 'deleted successfully'
        })
      })
    }

  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/payment',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
    if(req.body.total_price!=1 || req.body.total_price!="1"){

    
var random =   Math.floor(1000 + Math.random() * 9000);
var servicesdata = {
  productinfo: req.body.productinfo,
  txnid: req.body.txnid,
  amount: req.body.total_price,
  email: req.body.email,
  phone: req.body.usernumber,
  lastname: "",
  firstname: req.body.name,
  surl: "http://deloservices.com/api/successfull_payement", //\"http://localhost:3000/payu/success"
  furl: "http://deloservices.com/api/failed_payment", //"http://localhost:3000/payu/fail"
};

console.log(servicesdata)
  


  payumoney.makePayment(servicesdata, function(error, response) {
      if (error) {
       throw error;
      } else {
       res.json({
         msg : response
       })
      }
    });
  
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}


})

router.post('/successfull_payement',(req,res)=>{
  res.json({
    msg : 'successfull'
  })
})

router.post('/failed_payment',(req,res)=>{
  res.json({
    msg : 'failed'
  })
})


router.get('/success_razorpay',(req,res)=>{
  res.json({
    msg : 'success'
  })
})

router.post('/success_razorpay',(req,res)=>{
  console.log("reaponse from razorpay",req.body)
  if(req.body.razorpay_order_id && req.body.razorpay_signature && req.body.razorpay_payment_id) {
  console.log('abc')
  res.json(req.body)
  }
  else{
    console.log('jhgf')
    res.redirect('https://www.deloservices.com/failed_payment')
  }
})


 
router.post('/booking_successfull',(req,res)=>{

  if(process.env.encryptedkey == req.body.key){
    if(req.body.price != '1' || req.body.price !=1){

      let somePushTokens = []

      for(i=0;i<somePushTokens.length;i++){
        somePushTokens.pop();
      }
    

  var bookmsg = req.body.categoryid
   var ournumber = '919873159745'
    let body = req.body
    console.log(body)


    pool.query(`select * from booking where name = "${req.body.name}" and usernumber = "${req.body.usernumber}" and date = "${req.body.date}" and time = "${req.body.time}" and booking_date = "${req.body.booking_date}" and categoryid = "${req.body.categoryid}" and subcategoryid = "${req.body.subcategoryid}"`,(err,result)=>{
      if(err) throw err;
      else if(result[0]){
        res.json({
          msg : 'perfect'
        })
    
      }
      else{

    pool.query(`insert into booking (name,email,usernumber,address,date,time,booking_date,booking_id,price,payment_mode,pincode,working_otp,quantity,categoryid,subcategoryid,teamprice,membershipprice,promocode,booking_time,orderid,color) 
     values('${req.body.name}','${req.body.email}','${req.body.usernumber}','${req.body.address}'
     ,'${req.body.date}','${req.body.time}','${req.body.booking_date}','${req.body.booking_id}','${req.body.price}','${req.body.payment_mode}','${req.body.pincode}','${req.body.working_otp}','${req.body.quantity}','${req.body.categoryid}','${req.body.subcategoryid}','${req.body.teamprice}','','${req.body.promocode}','${req.body.booking_time}','${req.body.orderid}','#507ec0')`,(err,result)=>{
            if(err) throw err;
            else {
              pool.query(`update users set offer = offer-100  where number = "${req.body.usernumber}" and promocode = "${req.body.promocode}"`,(err,result)=>{
                if(err) throw err;
                else{

              
                pool.query(`delete from cart where usernumber = "${req.body.usernumber}"`,(err,result)=>{
                    if(err) throw err;
                   else{


                    pool.query(`delete from checkout_details where usernumber = "${req.session.usernumber}"`,(err,result)=>{
                      if(err) throw err;
                     else{ 

                    msg91.sendOne(authkey,req.body.usernumber,`Hello ${body.name}, Thanks for your request. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj`,senderid,route,dialcode,function(response){
                       if(err) throw err;
                       else{
                        pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','Hello ${body.name}, Thanks for your request. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj') ` , (err,result)=>{
                          if(err) throw err;
                       
                     else{
                       

                      msg91.sendOne(authkey,ournumber,`A new services is booked by ${body.name} on ${body.date} at ${body.time}.`,senderid,route,dialcode,function(response){
 if(err) throw err;
 else{
  pool.query(`insert into normal_message (number,date,time,message) values('${ournumber}','${today}','${todaytime}','A new services is booked by ${body.name} on ${body.date} at ${body.time}.') ` , (err,result)=>{
    if(err) throw err;
 
 else{

console.log("Response",response)
if(req.body.categoryid == '9'){


    pool.query(`select name,number from team where
     pincode = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}" 
    || pincode1 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}'  and subcategoryid = "${req.body.subcategoryid}"
    || pincode2 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    || pincode3 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    || pincode4 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    || pincode5 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    || pincode6 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    || pincode7 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    || pincode8 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' and subcategoryid = "${req.body.subcategoryid}"
    `,(err,result)=>{
        if(err) throw err;
        else if(result[0]){
            console.log("team member",result)
            console.log('req.body.reqbokkingid[0]',bookmsg)
            for(i=0;i<result.length;i++){ 


              msg91.sendOne(authkey,result[i].number,` Hello ${result[i].name}, New Lead is booked  for ${bookmsg}  at ${req.body.date} , ${req.body.time}, To pick this lead, visit on https://tinyurl.com/r3hepww`,senderid,route,dialcode,function(response){
                
          }) 






          pool.query(`insert into normal_message (number,date,time,message) values('${result[i].number}','${today}','${todaytime}','Hello ${result[i].name}, New Lead is booked  for ${bookmsg}  at ${req.body.date} , ${req.body.time}, To pick this lead, visit on https://tinyurl.com/r3hepww') ` , (err,result)=>{
          })
            
            }


            pool.query(`select * from token`,(err,result)=>{
              if(err) throw err;
              else{
        
                  for(i=0;i<result.length;i++){
                    console.log("Token",result[i].token)
        somePushTokens.push(result[i].token)
                  }
        
               
            // Create a new Expo SDK client
            console.log("Push Data",req.body)
        let expo = new Expo();
        
        // Create the messages that you want to send to clents
        let messages = [];
        
        console.log("Kuch to adbad hai",somePushTokens)
        for (let pushToken of somePushTokens) {
          // Each push token looks like ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
        
          // Check that all your push tokens appear to be valid Expo push tokens
          if (!Expo.isExpoPushToken(pushToken)) {
            console.error(`Push token ${pushToken} is not a valid Expo push token`);
            continue;
          }
        
          // Construct a message (see https://docs.expo.io/versions/latest/guides/push-notifications.html)
          messages.push({
            to: pushToken,
            sound: 'default',
            body: 'Hello, there is one new booking',
            
            data: { withSome: 'data' },
          })
        }
        
        // The Expo push notification service accepts batches of notifications so
        // that you don't need to send 1000 requests to send 1000 notifications. We
        // recommend you batch your notifications to reduce the number of requests
        // and to compress them (notifications with similar content will get
        // compressed).
        let chunks = expo.chunkPushNotifications(messages);
        let tickets = [];
        (async () => {
          // Send the chunks to the Expo push notification service. There are
          // different strategies you could use. A simple one is to send one chunk at a
          // time, which nicely spreads the load out over time:
          for (let chunk of chunks) {
            try {
              let ticketChunk = await expo.sendPushNotificationsAsync(chunk);
              console.log(ticketChunk);
              tickets.push(...ticketChunk);
              // NOTE: If a ticket contains an error code in ticket.details.error, you
              // must handle it appropriately. The error codes are listed in the Expo
              // documentation:
              // https://docs.expo.io/versions/latest/guides/push-notifications#response-format
            } catch (error) {
              console.error(error);
            }
          }
        })();
        
        
        
        // Later, after the Expo push notification service has delivered the
        // notifications to Apple or Google (usually quickly, but allow the the service
        // up to 30 minutes when under load), a "receipt" for each notification is
        // created. The receipts will be available for at least a day; stale receipts
        // are deleted.
        //
        // The ID of each receipt is sent back in the response "ticket" for each
        // notification. In summary, sending a notification produces a ticket, which
        // contains a receipt ID you later use to get the receipt.
        //
        // The receipts may contain error codes to which you must respond. In
        // particular, Apple or Google may block apps that continue to send
        // notifications to devices that have blocked notifications or have uninstalled
        // your app. Expo does not control this policy and sends back the feedback from
        // Apple and Google so you can handle it appropriately.
        let receiptIds = [];
        for (let ticket of tickets) {
          // NOTE: Not all tickets have IDs; for example, tickets for notifications
          // that could not be enqueued will have error information and no receipt ID.
          if (ticket.id) {
            receiptIds.push(ticket.id);
          }
        }
        
        let receiptIdChunks = expo.chunkPushNotificationReceiptIds(receiptIds);
        (async () => {
          // Like sending notifications, there are different strategies you could use
          // to retrieve batches of receipts from the Expo service.
          for (let chunk of receiptIdChunks) {
            try {
              let receipts = await expo.getPushNotificationReceiptsAsync(chunk);
              console.log(receipts);
        
              // The receipts specify whether Apple or Google successfully received the
              // notification and information about an error, if one occurred.
              for (let receipt of receipts) {
                if (receipt.status === 'ok') {
                  continue;
                } else if (receipt.status === 'error') {
                  console.error(`There was an error sending a notification: ${receipt.message}`);
                  if (receipt.details && receipt.details.error) {
                    // The error codes are listed in the Expo documentation:
                    // https://docs.expo.io/versions/latest/guides/push-notifications#response-format
                    // You must handle the errors appropriately.
                    console.error(`The error code is ${receipt.details.error}`);
                  }
                }
              }
            } catch (error) {
              console.error(error);
            }
          }
        })();
        }
       
        })
        




            res.json({
              msg : 'perfect'
            })
           
        }


else{

  msg91.sendOne(authkey,req.body.usernumber,` Hello ${body.name}, We are unavailable on this location right now. Our team will contact you as soon as possible. `,senderid,route,dialcode,function(response){
    pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','Hello ${body.name}, We are unavailable on this location right now. Our team will contact you as soon as possible. ') ` , (err,result)=>{
          })
          console.log(response)
  }) 
    
    
    res.json({
      msg : 'perfect'
    })

  
}


    })

}
else{


    pool.query(`select name,number from team where 
    pincode = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode1 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode2 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode3 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode4 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode5 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode6 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode7 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
    || pincode8 = '${req.body.pincode}' and categoryid = '${req.body.categoryid}' 
   
   
    
    `,(err,result)=>{
        if(err) throw err;
        else if(result[0]){
            console.log(result)
            console.log('req.body.reqbokkingid[0]',bookmsg)
            for(i=0;i<result.length;i++){ 
              msg91.sendOne(authkey,result[i].number,` Hello ${result[i].name}, New Lead is booked  for ${bookmsg}  at ${req.body.date} , ${req.body.time}, To pick this lead, visit on https://tinyurl.com/r3hepww`,senderid,route,dialcode,function(response){

            
          }) 

        }
          pool.query(`select * from token`,(err,result1)=>{
            if(err) throw err;
            else{
      
             
             
          // Create a new Expo SDK client
          // console.log("Push Data",req.body)
      let expo = new Expo();
      
      // Create the messages that you want to send to clents
      let messages = [];

      for(i=0;i<result1.length;i++){
        console.log("Token123",result1[i].token)
somePushTokens.push(result1[i].token)
      }

      
      //somePushTokens.push(req.body.token)
      console.log("Kuch to adbad hai",somePushTokens)
      for (let pushToken of somePushTokens) {
        // Each push token looks like ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
      console.log("Hii..",somePushTokens)
        // Check that all your push tokens appear to be valid Expo push tokens
        if (!Expo.isExpoPushToken(pushToken)) {
          console.error(`Push token ${pushToken} is not a valid Expo push token`);
          continue;
        }
      
        // Construct a message (see https://docs.expo.io/versions/latest/guides/push-notifications.html)
        messages.push({
          to: pushToken,
          sound: 'default',
          body: 'This is a test notification',
          
          data: { withSome: 'data' },
        })
      }
      
      // The Expo push notification service accepts batches of notifications so
      // that you don't need to send 1000 requests to send 1000 notifications. We
      // recommend you batch your notifications to reduce the number of requests
      // and to compress them (notifications with similar content will get
      // compressed).
      let chunks = expo.chunkPushNotifications(messages);
      let tickets = [];
      (async () => {
        // Send the chunks to the Expo push notification service. There are
        // different strategies you could use. A simple one is to send one chunk at a
        // time, which nicely spreads the load out over time:
        for (let chunk of chunks) {
          try {
            let ticketChunk = await expo.sendPushNotificationsAsync(chunk);
            console.log(ticketChunk);
            tickets.push(...ticketChunk);
            // NOTE: If a ticket contains an error code in ticket.details.error, you
            // must handle it appropriately. The error codes are listed in the Expo
            // documentation:
            // https://docs.expo.io/versions/latest/guides/push-notifications#response-format
          } catch (error) {
            console.error(error);
          }
        }
      })();
      
      
      
      // Later, after the Expo push notification service has delivered the
      // notifications to Apple or Google (usually quickly, but allow the the service
      // up to 30 minutes when under load), a "receipt" for each notification is
      // created. The receipts will be available for at least a day; stale receipts
      // are deleted.
      //
      // The ID of each receipt is sent back in the response "ticket" for each
      // notification. In summary, sending a notification produces a ticket, which
      // contains a receipt ID you later use to get the receipt.
      //
      // The receipts may contain error codes to which you must respond. In
      // particular, Apple or Google may block apps that continue to send
      // notifications to devices that have blocked notifications or have uninstalled
      // your app. Expo does not control this policy and sends back the feedback from
      // Apple and Google so you can handle it appropriately.
      let receiptIds = [];
      for (let ticket of tickets) {
        // NOTE: Not all tickets have IDs; for example, tickets for notifications
        // that could not be enqueued will have error information and no receipt ID.
        if (ticket.id) {
          receiptIds.push(ticket.id);
        }
      }
      
      let receiptIdChunks = expo.chunkPushNotificationReceiptIds(receiptIds);
      (async () => {
        // Like sending notifications, there are different strategies you could use
        // to retrieve batches of receipts from the Expo service.
        for (let chunk of receiptIdChunks) {
          try {
            let receipts = await expo.getPushNotificationReceiptsAsync(chunk);
            console.log(receipts);
      
            // The receipts specify whether Apple or Google successfully received the
            // notification and information about an error, if one occurred.
            for (let receipt of receipts) {
              if (receipt.status === 'ok') {
                continue;
              } else if (receipt.status === 'error') {
                console.error(`There was an error sending a notification: ${receipt.message}`);
                if (receipt.details && receipt.details.error) {
                  // The error codes are listed in the Expo documentation:
                  // https://docs.expo.io/versions/latest/guides/push-notifications#response-format
                  // You must handle the errors appropriately.
                  console.error(`The error code is ${receipt.details.error}`);
                }
              }
            }
          } catch (error) {
            console.error(error);
          }
        }
      })();
      }
    
      })
      




          pool.query(`insert into normal_message (number,date,time,message) values('${result[i].number}','${today}','${todaytime}','Hello ${result[i].name}, New Lead is booked  for ${bookmsg}  at ${req.body.date} , ${req.body.time}, To pick this lead, visit on https://tinyurl.com/r3hepww ') ` , (err,result)=>{
          })
          
            
         
           res.json({
             msg : 'perfect'
           })
           
        }





        else{

          msg91.sendOne(authkey,req.body.usernumber,` Hello ${body.name}, We are unavailable on this location right now. Our team will contact you as soon as possible. `,senderid,route,dialcode,function(response){

            
          }) 
           

          pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}',' Hello ${body.name}, We are unavailable on this location right now. Our team will contact you as soon as possible. ') ` , (err,result)=>{
          })
          

            
            res.json({
              msg : 'perfect'
            })
        
          
        }



    })

}

                    
                     }
                    });
                    
 }
})
                  }
                })
              }
            })
              }
            })
                  }
                  
                })
                   }
                })
            };
        }) 
      }
    })
      }
      
      else{
        res.json({
          type : 'error',
          description : '404 Not Found'
        })
      }
    }
    else{
      res.json({
        type : 'error',
        description : '404 Not Found'
      })
    }
 })
 



router.post('/checkout_details',(req,res)=>{
  let body = req.body

  console.log(body)
  pool.query(`insert into checkout_details set ? ` , body, (err,result)=>{
    err ? console.log(err) : res.json({msg : 'success'})
  })
})



 router.post('/booking', (req, res) => {
  if(process.env.encryptedkey == req.body.key){
  var query1 = `select b.booking_id , b.id , b.date , b.time from booking b
  where b.usernumber = "${req.body.usernumber}" and b.cancellation_charge is null and b.status is null 
  || b.usernumber = "${req.body.usernumber}" and b.cancellation_charge is null and b.status is null 
  || b.usernumber = "${req.body.usernumber}" and b.cancellation_charge is null and b.status = '' 
  ||  b.usernumber = "${req.body.usernumber}" and b.cancellation_charge is null and b.status = '' 
  ||  b.usernumber = "${req.body.usernumber}" and b.cancellation_charge is null and b.status != 'completed' 
  ||  b.usernumber = "${req.body.usernumber}" and b.cancellation_charge = '' and b.status != 'completed' 
     order by id desc;`
   
        pool.query(query1,(err,result)=>{
        if(err) throw err;
      else res.json(result)
    
    })  
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})



router.post('/history', (req, res) => {
  if(process.env.encryptedkey == req.body.key){
  pool.query(`select b.booking_id , b.id , b.date , b.time from booking b where b.usernumber = "${req.body.usernumber}"  and b.status ='completed' order by id desc `,(err,result)=>{
     if(err) throw err;
     else res.json(result)
   
 })  
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/singlebooking', (req, res) => {
  if(process.env.encryptedkey == req.body.key){
  var query1 = `select b.*,t.name as service_agent_details , t.image as service_agent_image from booking b left join team t on b.service_agent = t.number
    where b.id="${req.body.id}"`
   
        pool.query(query1,(err,result)=>{
        if(err) throw err;
      else res.json(result)
    
    })  
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})






router.post('/call',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  let body = req.body
  console.log(body)

  var dataString = `From=${body.from}&To=${body.to}&CallerId=01141183789`;
console.log('dattastring',dataString)
var options = {
    url: `https://30cf99154278c0295a01ffa04e00c36548998f82e27b9faa:c930c60b44c91ea22c25f5ee24cc943738ed22eb62e14831@api.exotel.com/v1/Accounts/deloservices1/Calls/connect?From=${body.from}&To=${body.to}`,
    method: 'POST',
   
};

var options1 = {
  url: `https://30cf99154278c0295a01ffa04e00c36548998f82e27b9faa:c930c60b44c91ea22c25f5ee24cc943738ed22eb62e14831@api.exotel.com/v1/Accounts/deloservices1/CustomerWhitelist?VirtualNumber=01141183789&Number=${body.to}`,
  method: 'POST',
  };



function callback(error, response, body) {
    if (!error && response.statusCode == 200) {
      res.json({
        msg : 'perfect'
      })
    }
    if(error) console.log('error');
    else if(response.statusCode == 200) console.log('perfect')
    else{
      request(options1,(error,response)=>{
          if (!error && response.statusCode == 200) {
            res.json({
              msg : 'perfect'
            })
      }
      if(error) console.log('error1');
      else if(response.statusCode == 200) {
        request(options,(error,response)=>{
          if (!error && response.statusCode == 200) {
            console.log(body);
        }
        else {
          res.json({
            msg : 'perfect'
          })
        }
        })
      }
     
      })
    }
}
request(options,callback)
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})




router.post('/pick',(req,res)=>{

  if(process.env.encryptedkey == req.body.key){
    let body = req.body;
  let charges1 = body.price*12/100; // customer gst == team price
  let teamprice = body.price - charges1  
  let gst = teamprice*25/1000;  // our margin
  let tds = (teamprice-gst)*5/1000; // team member tds 
  let charges = charges1/10 

console.log("Actual Price",body.price);
console.log("TeamPrice",teamprice)
console.log("Our margin",gst);
console.log("TDS",tds);
console.log("Charges",charges);


 //let tds = 0;
  let a = req.body.price/50
console.log("web",req.body)

pool.query(`select name from team where number = "${req.body.number}" `,(err,result)=>{
  if(err) throw err;
  else {
  console.log("web1")
pool.query(`select recharge_value from team where number = "${req.body.number}"`,(err,result)=>{
  console.log('recharge',result[0].recharge_value)
  if(err) throw err;
  
  else if (result[0].recharge_value < a){
    console.log("web3")
    res.json({msg : `You Don't Accept this lead beacuse of low balance`})
}
  else{
pool.query(`select * from booking where id = "${body.id}" and service_agent is not null`,(err,result)=>{
  if(err) throw err;
  else if(result[0]) {
    console.log("web4")
    res.json({msg : 'Picked Already'}) 
}
  else {
  console.log('Charges tak phch gya...')
     if(body.price >req.body.price){
       console.log("dnd",req.body.number)
        var query = `select * from booking where date = CURDATE() and service_agent = "${req.body.number}"   `
        pool.query(query,(err,result)=>{
          if(err) throw err;
          else if(result[0]) {
           
              var query1 = `update booking set service_agent  = "${req.body.number}", color = "#E74C3C" where id="${body.id}"`
            pool.query(query1,(err,result)=>{
              if(err) throw err;
              else {
                pool.query(`update team set recharge_value = recharge_value-${gst}-${tds}-${charges} where number="${req.body.number}"`,(err,result)=>{
                  if(err) throw err;
                  else{
                    console.log("Msg sent")

                    msg91.sendOne(authkey,req.body.usernumber, `${req.body.teamname} (+911141193613) is assigned to your ${body.bookingid}. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj`,senderid,route,dialcode,function(response){


if(err) console.log(err)
else{

  pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','${req.body.teamname} (+911141193613) is assigned to your ${body.bookingid}. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj ') ` , (err,result)=>{
 if(err) throw err;
 else{


  pool.query(`update team set recharge_value = recharge_value-${gst}-${tds}-${charges} where number="${req.body.number}"`,(err,result)=>{
  if(err) throw err;
  else{
    res.json({msg : 'Picked Successfully'})
  }
  })
}
 
})
}
        
                    });
                  }
                  
                })
              }
              
            
            })
            }
                       
          
          else {
           
  var query3 = `update booking set service_agent  = "${req.body.number}", color = "#E74C3C" where id="${body.id}"`
pool.query(query3,(err,result)=>{
  if(err) throw err;
  else {
    pool.query(`update team set recharge_value = recharge_value-${gst}-${tds}-${charges} where number="${req.body.number}"`,(err,result)=>{
      if(err) throw err;
      else{


        msg91.sendOne(authkey,req.body.usernumber, `${req.body.teamname} (+911141193613) is assigned to your ${body.bookingid}. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj`,senderid,route,dialcode,function(response){
           
        if(err) console.log(err)
        else{
          pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','${req.body.teamname} (+911141193613) is assigned to your ${body.bookingid}. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj ') ` , (err,result)=>{
if(err) throw err;
else{
  res.json({msg:'Picked Successfully'})
}
        })


        }
        
   
        });
      }
    })
  }
  

})

           
          }
        })
      }
      else{
        console.log("dnd",req.body.number)
      
          var query5 = `update booking set service_agent = "${req.body.number}" , color = "#E74C3C" where id="${body.id}"`
        pool.query(query5,(err,result)=>{
          if(err) throw err;
          else {
            pool.query(`update team set recharge_value = recharge_value-${gst}-${tds}-${charges} where number="${req.body.number}"`,(err,result)=>{
              if(err) throw err;
              else{

                msg91.sendOne(authkey,req.body.usernumber,`${req.body.teamname} (+911141193613) is assigned to your ${body.bookingid}. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj`,senderid,route,dialcode,function(response){
                  
                if(err) console.log(err)
                else{
                  pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','${req.body.teamname} (+911141193613) is assigned to your ${body.bookingid}. We have recieved your booking for ${body.date},${body.time}. For any help, click on https://tinyurl.com/v6pj3fj ') ` , (err,result)=>{
                if(err) throw err;
                else res.json({msg : 'Picked Successfully'})
                })
                }
               
                
                
                
             
                });
              }
            })
          }
          
        
        })
        
                  

      }
    }
  })
}
})   
 
  }
})
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
})


router.post('/delete', (req, res) => {
  if(process.env.encryptedkey == req.body.key){



let body = req.body
  console.log(req.body)
  let charges1 = body.price*12/100; // customer gst == team price
  let teamprice = body.price - charges1  
  let gst = teamprice*25/1000;  // our margin
  let tds = (teamprice-gst)*5/1000; // team member tds 
  let charges = charges1/10 

console.log("Actual Price",body.price);
console.log("TeamPrice",teamprice)
console.log("Our margin",gst);
console.log("TDS",tds);
console.log("Charges",charges);



if(req.body.service_agent == null || req.body.service_agent == "" || req.body.service_agent == [] || req.body.service_agent == "null"){
  pool.query(`insert into cancel_booking(name,email,usernumber,address,booking_id,payment_mode,date,time,booking_date,price,reason,cancel_time,cancel_date,booking_time) values ("${body.name}","${body.email}","${body.usernumber}","${body.address}","${body.booking_id}","${body.payment_mode}","${body.date}","${body.time}","${body.booking_date}","${body.price}","via_app","${todaytime}", "${today}" , "${body.booking_time}")`,(err,result)=>{
    if(err) throw err;
    else {
     pool.query(`delete from booking where id = ${body.id}`, (err, result) => {
       if(err) throw err;
       else res.json({msg:'successfully'});
   })
    }
  })
}

else {

  pool.query(`insert into cancel_booking(name,email,usernumber,address,booking_id,payment_mode,date,time,booking_date,price,reason,cancel_time,cancel_date,booking_time) values ("${body.name}","${body.email}","${body.usernumber}","${body.address}","${body.booking_id}","${body.payment_mode}","${body.date}","${body.time}","${body.booking_date}","${body.price}","via_app","${todaytime}", "${today}" , "${body.booking_time}")`,(err,result)=>{
    if(err) throw err;
    else {

      pool.query(`update team set recharge_value = recharge_value+${tds}+${gst}+${charges} where number="${req.body.service_agent}"`,(err,result)=>{
      if(err) throw err;
      else {
        pool.query(`delete from booking where id = ${body.id}`, (err, result) => {
          if(err) throw err;
          else res.json({msg:'successfully'});
      })
      }
      
      })

    
    }
  })
}






 
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
 })


 
 router.post('/reschedule',(req,res)=>{
 
  console.log(req.body)
  pool.query(`update booking set ? where id = ?`, [req.body, req.body.id], (err, result) => {
      if(err) throw err;
      else res.json({msg:'updated'});
  })

})
  



router.post('/agent_details',(req,res)=>{
  if(process.env.encryptedkey == req.body.key){
  
   var query = `select name ,image from team where number = "${req.body.number}";`
    var query1 = `select name,rating , review from booking where service_agent = "${req.body.number}" and rating is not null;`
    var query2 =`select avg(rating) as rating from booking where service_agent = "${req.body.number}";`
    pool.query(query+query1+query2,(err,result)=>{
      if(err) throw err;
      else res.json(result)
     

    })
  }
  else{
    res.json({
      type : 'error',
      description : '404 Not Found'
    })
  }
})



router.post('/matchotp',(req,res)=>{
  
  console.log(req.body)
  pool.query(`update booking set ? where id = ?`, [req.body, req.body.id], (err, result) => {
    if(err) throw err;
    else res.json({
      msg : 'otp match'
    });
})


})



router.post('/completed', (req, res) => {
  
  let body = req.body
  body['color'] = '#009688'
  
  console.log(req.body)
  pool.query(`update booking set  ? where id = ?`, [body, body.id], (err, result) => {
      if(err) throw err;
      else {
        pool.query(`update booking set cancellation_charge = '0' where usernumber = '${req.body.usernumber}'`, (err, result) => {
          if(err) throw err;
          else{

            msg91.sendOne(authkey,req.body.usernumber,`Thank you for using Delo Services.Services we value you as a customer and hope you will consider us as a preferred way of getting around again in future.`,senderid,route,dialcode,function(response){
              
              if(err) console.log(err)
              else{
                pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','Thank you for using Delo Services.Services we value you as a customer and hope you will consider us as a preferred way of getting around again in future.') ` , (err,result)=>{
              if(err) console.log(err)
              else res.json({msg:'completed'})
              })
              }
              
             
           });

          }
         
        })
      }
  })

})



    router.post('/offers',(req,res)=>{
      if(process.env.encryptedkey == req.body.key){
      pool.query(`select * from users where number = "${req.body.number}"`,(err,result)=>{
        err ? console.log(err) : res.json(result)
      })
    }
    else{
      res.json({
        type : 'error',
        description : '404 Not Found'
      })
    }
    })


    router.post('/prmocode_validate',(req,res)=>{
      if(process.env.encryptedkey == req.body.key){
      console.log(req.body)
  pool.query(`select id from users where number="${req.body.number}" and promocode = "${req.body.promocode}" and valid_date>= "${req.body.date}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0]){
      res.json({msg : 'valid'})
    }
    else{
      res.json({msg : 'invalid'})
    }
  })
}
else{
  res.json({
    type : 'error',
    description : '404 Not Found'
  })
}
    })


    router.post('/check_promocode',(req,res)=>{
      if(process.env.encryptedkey == req.body.key){
      console.log(req.body)
      pool.query(`select id from booking where usernumber = "${req.body.number}" and categoryid="${req.body.categoryid}" and promocode="${req.body.promocode}"`,(err,result)=>{
        if(err) throw err;
        else if(result[0]){
          res.json({msg:'already applied'})  
        }
        else{
          res.json({msg : 'applied'})
        }
      })
    }
    else{
      res.json({
        type : 'error',
        description : '404 Not Found'
      })
    }
    })





    router.post('/subcategory/react',(req,res)=>{
      console.log(req.body)
     if(req.body.storagenumber) {
         pool.query(`select * from category where seo_name = "${req.body.seo_name}"`,(err,result)=>{
             if(err) throw err;
             else 
             {
                 req.session.getcategoryid = result[0].id;
            
         var query = `select s.*,(select c.image from category c where c.id = "${req.session.getcategoryid}" ) as categoryimage,
         (select c.name from category c where c.id = "${req.session.getcategoryid}") as categoryname 
         from subcategory s where s.categoryid = "${req.session.getcategoryid}";`
          pool.query(query,(err,result)=>{
             if(err) throw err;
            else{
              res.json(result)
            }
           
         })
    
     }
    })
    
     }
     else{
    
         pool.query(`select * from category where seo_name = "${req.body.seo_name}"`,(err,result)=>{
             if(err) throw err;
             else 
             {
                 req.session.getcategoryid = result[0].id;
             
         var query = `select s.*,(select c.image from category c where c.id = "${req.session.getcategoryid}" ) as categoryimage,
         (select c.name from category c where c.id = "${req.session.getcategoryid}") as categoryname 
         from subcategory s where s.categoryid = "${req.session.getcategoryid}";`
         pool.query(query,(err,result)=>{
             if(err) throw err;
             else{
              res.json(result)
            }
           
           
         })
     
     }
    })
     }
     
    
    })    




    router.post('/services/react',(req,res)=>{
      console.log(req.body)
     if(req.body.storagenumber) {
         pool.query(`select * from subcategory where seo_name = "${req.body.seo_name}"`,(err,result)=>{
             if(err) throw err;
             else 
             {
                 req.session.getsubcategoryid = result[0].id;
            
         var query = `select s.*,(select sub.name from subcategory sub where sub.id =  "${req.session.getsubcategoryid}" )
         as subcategoryname from services s where  s.subcategoryid = "${req.session.getsubcategoryid}"`
          pool.query(query,(err,result)=>{
             if(err) throw err;
            else{
              res.json(result)
            }
           
         })
    
     }
    })
    
     }
     else{
    
         pool.query(`select * from subcategory where seo_name = "${req.body.seo_name}"`,(err,result)=>{
             if(err) throw err;
             else 
             {
              req.session.getsubcategoryid = result[0].id;
             
              var query = `select s.*,(select sub.name from subcategory sub where sub.id =  "${req.session.getsubcategoryid}" )
              as subcategoryname from services s where  s.subcategoryid = "${req.session.getsubcategoryid}"`
         pool.query(query,(err,result)=>{
             if(err) throw err;
             else{
              res.json(result)
            }
           
           
         })
     
     }
    })
     }
     
    
    })    



////////////////////////////////For Users Ends////////////////////////
/*
export default createAppContainer(
  createSwitchNavigator(
    {
      AuthLoading: AuthLoadingScreen,
      App: AppNavigator,
      Auth: AuthStack,
    },
    {
      initialRouteName: 'AuthLoading',
    }
  )
);*/







router.post('/recharge_successfull',(req,res)=>{
  let body = req.body;
 req.body.orderid
  let msg = `your Rs. ${req.body.amount} recharge is successfull. Benifits Revieved ${req.body.productinfo} credits`

  pool.query(`select * from recharge where firstname = "${req.body.firstname}" and amount = "${req.body.amount}" and productinfo = "${req.body.productinfo}" and phone = "${req.body.phone}"  and date = "${req.body.date}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0]){
      res.json({
        msg:'update successfully'
      })
  
    }
    else{

  pool.query(`update team set recharge_value = recharge_value+${req.body.productinfo} where number="${req.body.phone}"`,(err,result)=>{
    if(err) throw err;
    else{
      console.log('Updated')
      console.log('Body',body)




      
    
      pool.query(`insert into recharge set ?`,body,(err,result)=>{
        if(err) throw err;
        else{
          console.log('send')

          msg91.sendOne(authkey,req.body.phone,`your Rs. ${req.body.ammount} recharge is successfull. Benifits Revieved ${req.body.productinfo}`,senderid,route,dialcode,function(response){
         
            if(err) throw err;

else{
  pool.query(`insert into normal_message (number,date,time,message) values('${req.body.phone}','${today}','${todaytime}','your Rs. ${req.body.ammount} recharge is successfull. Benifits Revieved ${req.body.productinfo}') ` , (err,result)=>{
    if(err) console.log(err)
    else res.json(
      {
        msg:'update successfully'
      }
      )
  })
}

            
          })
        }
      })
    }
  }) 
}
  })
  })
  







  router.post('/laundryAppointment',(req,res)=>{
    console.log(req.body)
    let body = req.body
    var working_otp =   Math.floor(1000 + Math.random() * 9000);
    body['working_otp'] = working_otp
    body['color'] = '#507ec0'

    pool.query(`insert into laundry_appointment set ? ` , body, (err,result)=>{
      if(err) console.log(err)
      else{
          pool.query(`insert into booking set ? ` , body, (err,result)=>{
               if(err) console.log(err)
               else {

                msg91.sendOne(authkey,req.body.usernumber,` Hello ${req.body.name}, your appointment for Delo Laundry is sucessfully booked`,senderid,route,dialcode,function(response){
               
                  }) 

                  pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','Hello ${req.body.name}, your appointment for Delo Laundry is sucessfully booked') ` , (err,result)=>{
                    if(err) console.log(err)
                    else{
                      res.json({
                        msg : 'success'
                      })
                    }
                  })


                  
               }
          })
      }
   })

  })

  router.get('/laundry_pick_today',(req,res)=>{
    pool.query(`select * from booking where categoryid = "14" and date = CURDATE() and status !='picked successfully'   order by id desc`,(err,result)=>{
      err ? console.log(err) : res.json(result)
    })
  })


  router.get('/laundry_pick_tommrow',(req,res)=>{
    pool.query(`select * from booking where categoryid = "14" and date = CURDATE() + INTERVAL 1 DAY and status !='picked successfully'  order by id desc`,(err,result)=>{
      err ? console.log(err) : res.json(result)
    })
  })

  router.get('/laundry_count_today',(req,res)=>{
    pool.query(`select count(id) as counter from booking where categoryid = "14" and date = CURDATE() and status !='picked successfully' order by id desc `,(err,result)=>{
      err ? console.log(err) : res.json(result)
    })
  })


  router.get('/laundry_count_tommorow',(req,res)=>{
    pool.query(`select count(id) as counter from booking where categoryid = "14" and date =  CURDATE() + INTERVAL 1 DAY and status !='picked successfully' order by id desc `,(err,result)=>{
      err ? console.log(err) : res.json(result)
    })
  })


  router.post('/single_laundry_pick_details',(req,res)=>{
    pool.query(`select * from booking where id = "${req.body.id}"`,(err,result)=>{
      if(err) throw err;
      else res.json(result)
    })
  })


  router.post('/laundry_cart',(req,res)=>{
   let body = req.body
    console.log(req.body)
  
if(req.body.quantity=='0' || req.body.quantity==0 ){

pool.query(`delete from laundry_cart where booking_id = '${req.body.booking_id}' and  laundryid = "${req.body.laundryid}"`,(err,result)=>{
  if(err) throw err;
  else{
    res.json({
      msg : 'updated sucessfully'
    })
  }
})
}
else{



  pool.query(`select * from laundry_cart where  booking_id = '${req.body.booking_id}' and  laundryid = "${req.body.laundryid}"`,(err,result)=>{
  if(err) throw err;
  else if(result[0]) {
    pool.query(`update laundry_cart set quantity = ${req.body.quantity}  where booking_id = '${req.body.booking_id}' and laundryid = "${req.body.laundryid}"`,(err,result)=>{
  
     if(err) throw err;
  else{
    res.json({
      msg : 'updated sucessfully'
    })
  }
  })

   }
  else{
    pool.query(`insert into laundry_cart set ?`,body,(err,result)=>{
      if(err) throw err;
      else {
        res.json({
          msg : 'updated sucessfully'
        })
      }
    })
  }
  
  })
}
  })  


router.get('/get_laundry_items',(req,res)=> pool.query(`select * from LaundryItems`,(err,result)=> err ? console.log(err) : res.json(result)))


router.post('/get_laundry_cart',(req,res)=>{
  pool.query(`select l.*,(select i.name from LaundryItems i where i.id = l.laundryid)as itemname from laundry_cart l where l.booking_id = '${req.body.booking_id}' `,(err,result)=>{
    if(err) throw err;
    else{
      res.json(result)
    }
  })
})




router.post('/laundry_picked_successfully',(req,res)=>{
  let body = req.body
  pool.query(`update booking set ? where id = ?`,[req.body,req.body.booking_id],(err,result)=>{
if(err) throw err;
else {
  pool.query(`delete from laundry_cart where booking_id = ${req.body.booking_id}`, (err, result) => {
    if(err) throw err;

    msg91.sendOne(authkey,req.body.usernumber, `Our Delivery Boy is Successfully Pick your items. Your items such as ${req.body.inserteditem} and quantity ${req.body.insertedquantity} respectevely.`,senderid,route,dialcode,function(response){
  
          
    }) 
  
    pool.query(`insert into normal_message (number,date,time,message) values('${req.body.usernumber}','${today}','${todaytime}','Hello ${req.body.name}, your appointment for Delo Laundry is sucessfully booked') ` , (err,result)=>{
      if(err) console.log(err)
      else{
        res.json({
          msg : 'success'
        })
      }
    })
})

}
      })
   
})



router.post('/Delo_Laundry_Pick_Login',(req,res)=>{
  pool.query(`select * from Delo_Laundry_Pick where unique_id = "${req.body.uniqueid}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0]){
      res.json(result)
    }
    else{
      res.json({msg : 'invalid'})
    }
})
})

router.post('/Delo_Laundry_Drop_Login',(req,res)=>{
  pool.query(`select * from Delo_Laundry_Drop where uniqueid = "${req.body.uniqueid}"`,(err,result)=>{
    if(err) throw err;
    else if(result[0]){
      res.json(result)
    }
    else{
      res.json({msg : 'invalid'})
    }
})
})



router.get('/Laundry_Drop_Data',(req,res)=>{
  
  pool.query(`select * from booking  where dropdate = CURDATE() and categoryid = "14" and status = "picked successfully" `,(err,result)=>{
    if(err) throw err;
    else res.json(result);
  })

})
  


router.post('/find_rating',(req,res)=>{
  pool.query(`select b.*,(select t.name from team t where t.number = b.service_agent) as teamname , (select t.image from team t where t.number = b.service_agent) as teamimage from booking b where b.usernumber = "${req.body.usernumber}" and b.rating ='get_rating' and b.review = 'get_review' order by id desc limit 1`,(err,result)=>{
    if(err) throw err;
    else res.json(result)
  })
 })
 


 router.post('/update_customer_rating',(req,res)=>{
   let body = req.body
  pool.query(`update booking set ? where id = ?`,[req.body,req.body.booking_id],(err,result)=>{
  if(err) throw err;
  else res.json(result)
  })
 })



 router.post('/team_leave',(req,res)=>{
  let body = req.body
 pool.query(`update team set ? where number = ?`,[req.body,req.body.number],(err,result)=>{
 if(err) throw err;
 else res.json(result)
 })
})


router.post('/user_invoice',(req,res)=>{
  pool.query(`select * from booking where id = "${req.body.id}"`,(err,result)=>{
    if(err) throw err;
    else res.json(result)
  })
})


//Show Cancel Job API
router.post('/cancel_job',(req,res)=> pool.query(`select * from cancel_booking where service_agent = "${req.body.number}" order by id desc`,(err,result)=> err ? console.log(err) : res.json(result)))







router.post('/razorpay',(req,res)=>{
 const url = `https://rzp_live_2KlcXieUGyQ8k6:9CukFlVqEBgQ1l7LB03DXBPk@api.razorpay.com/v1/orders/`;
  const data = {
      amount:req.body.price*100,  // amount in the smallest currency unit
    //amount:100,
    currency: 'INR',
      payment_capture: true
  }
  const options = {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
          'Content-Type': 'application/json'
      }
  }
  fetch(url, options)
      .then(res => res.json())
      .then(
          resu => res.json(resu)
        
      );
    
})


router.post('/processing-information',(req,res)=>{
  console.log(req.body.number)
  pool.query(`select t.*,(select c.name from category c where c.id = t.categoryid) as categoryname from team1 t where t.number = "${req.body.number}"`,(err,result)=>{
  if(err){
    console.log(err)
  }
  else{
    console.log("jhgjh",result)
    res.json(result)
  }
    
  })
})





router.post('/rechagre_history',(req,res)=>{
  pool.query(`select * from recharge where phone = '${req.body.number}'`,(err,result)=>{
    err ?  console.log(err) : res.json(result)
  })
})













router.post('/updateimage',upload.single('image'),(req,res)=>{
  
  let body = req.body
  
    body['image'] = req.file.filename
    body['number'] = req.body.number
    console.log(body)
   
    pool.query(`update team set ? where number = ?`, [req.body, req.body.number], (err, result) => {
      if(err) throw err;
      else res.json(result);
  })
  
  })


module.exports = router;